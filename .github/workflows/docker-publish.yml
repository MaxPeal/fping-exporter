name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '59 4 * * *'
  push:
    branches: [ master ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
#    inputs:
#      clear-docker-cache:
#        description: 'clear docker cache with rm -fr /tmp/.buildx-cache /tmp/.buildx-cache-old /tmp/.buildx-cache-new'     
#        required: false 
#        type: boolean

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  ### IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - id: get-id
        uses: actions/github-script@v6.1.0
        with:
#            const id = context.payload.client_payload.value.split('-')[1]
#            core.setOutput('id', id)
          script: |
            const owner = context.repo.owner.toLowerCase();
            core.setOutput('owner', owner)
            const repo = context.repo.repo.toLowerCase();
            core.setOutput('repo', repo)
            const image = context.repo.repo.split('-')[1]
            core.setOutput('image', image)
      - run: echo "${{steps.get-id.outputs.id}}"
      - run: echo "${{steps.get-id.outputs.owner}}"
      - run: echo "${{steps.get-id.outputs.repo}}"
      - run: echo "${{steps.get-id.outputs.image}}"

      - name: set Docker cache-from, cache-to TO registry
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          echo "CACHE_FROM=type=registry,ref=${{ env.REGISTRY }}/${{steps.get-id.outputs.owner}}/${{steps.get-id.outputs.repo}}:buildcache" >>${GITHUB_ENV}
          echo "CACHE_TO=type=registry,ref=${{ env.REGISTRY }}/${{steps.get-id.outputs.owner}}/${{steps.get-id.outputs.repo}}:buildcache,mode=max" >>${GITHUB_ENV}
          echo "CACHE_FROM_AMD64=type=registry,ref=${{ env.REGISTRY }}/${{steps.get-id.outputs.owner}}/${{steps.get-id.outputs.repo}}:buildcache-amd64" >>${GITHUB_ENV}
          echo "CACHE_TO_AMD64=" >>${GITHUB_ENV}
          # echo "CACHE_TO_AMD64=type=registry,ref=${{ env.REGISTRY }}/${{steps.get-id.outputs.owner}}/${{steps.get-id.outputs.repo}}:buildcache-amd64,mode=max" >>${GITHUB_ENV}
        #run: |
        #  echo "CACHE_FROM=cache-from: type=registry,ref=${{ env.REGISTRY }}/${{steps.get-id.outputs.owner}}/${{steps.get-id.outputs.repo}}:buildcache" >>${GITHUB_ENV}
        #  echo "CACHE_TO=cache-to: type=registry,ref=${{ env.REGISTRY }}/${{steps.get-id.outputs.owner}}/${{steps.get-id.outputs.repo}}:buildcache,mode=max" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: set Docker cache-from, cache-to TO GHA
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "CACHE_FROM=type=gha" >>${GITHUB_ENV}
          echo "CACHE_TO=type=gha,mode=max" >>${GITHUB_ENV}
          echo "CACHE_FROM_AMD64=type=gha" >>${GITHUB_ENV}
          echo "CACHE_TO_AMD64=" >>${GITHUB_ENV}
          # echo "CACHE_TO_AMD64=type=gha,mode=max" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v2.8.1
        with:
          cosign-release: 'v1.9.0'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.0.1
        with:
          images: ${{ env.REGISTRY }}/${{steps.get-id.outputs.owner}}/${{steps.get-id.outputs.repo}}
          #images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: echo fromJSON
        run: |
          echo JSON=${{ fromJSON(steps.meta.outputs.json) }}
          echo BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          echo VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          echo REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build amd64 Docker image 
        id: build-and-push-amd64
        uses: docker/build-push-action@v3.0.0
        with:
          context: .
          platforms: "linux/amd64"
          #platforms: "linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x,linux/riscv64"
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ env.CACHE_FROM_AMD64 }}
          cache-to: ${{ env.CACHE_TO_AMD64 }}
          #cache-from: type=registry,ref=${{ env.REGISTRY }}/${{steps.get-id.outputs.owner}}/${{steps.get-id.outputs.repo}}:buildcache
          #cache-to: type=registry,ref=${{ env.REGISTRY }}/${{steps.get-id.outputs.owner}}/${{steps.get-id.outputs.repo}}:buildcache,mode=max

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3.0.0
        with:
          context: .
          platforms: "linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x"
          #platforms: "linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x,linux/riscv64"
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ env.CACHE_FROM }}
          cache-to: ${{ env.CACHE_TO }}
          #cache-from: type=registry,ref=${{ env.REGISTRY }}/${{steps.get-id.outputs.owner}}/${{steps.get-id.outputs.repo}}:buildcache
          #cache-to: type=registry,ref=${{ env.REGISTRY }}/${{steps.get-id.outputs.owner}}/${{steps.get-id.outputs.repo}}:buildcache,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: cosign sign ${{ env.REGISTRY }}/${{steps.get-id.outputs.owner}}/${{steps.get-id.outputs.repo}}@${{ steps.build-and-push.outputs.digest }}
